{"version":3,"sources":["ui/CzMap/common.ts","ui/CzMap/SvgMap.tsx","ui/CzMap/DistrictsMap.tsx","ui/CzMap/RegionsMap.tsx","api/runtime.ts","model/nuts.ts","utils/compareStrings.ts","model/district.ts","utils/today.ts","utils/dateUtils.ts","api/czDistrictsBig.ts","utils/constants.ts","model/state.ts","model/region.ts","ui/Graph/Graph.tsx","ui/TimeIntervalToggle.tsx","App.tsx","serviceWorker.ts","model/store.ts","theme.ts","index.tsx"],"names":["SHAPE_KEYS","path","polygon","polyline","getAttributeFromEventTarget","e","attributeName","el","document","elementFromPoint","clientX","clientY","dataset","undefined","useStyles","makeStyles","region","stroke","strokeWidth","strokeLinejoin","regionSelection","fill","SvgMap","regions","onPointerMove","onFinalChange","selectedRegionCode","style","viewBox","classes","lastNotified","useRef","selectedRegion","useMemo","find","code","touchAction","id","current","buttons","onPointerDown","onPointerUp","map","type","elType","color","shape","React","createElement","className","key","DistrictsMap","data","maxActiveCount","props","enhanced","districts","x","interpolateReds","district","activeCount","RegionsMap","r","toJson","response","json","mzcrUrl","resource","name","spc","asc","a","b","localeCompare","all","nuts","filter","length","sort","getRegion","substring","today","now","Date","UTC","getFullYear","getMonth","getDate","formatIsoDate","year","month","date","dateToIsoDate","getUTCFullYear","getUTCMonth","getUTCDate","makeKey","items","join","get","Promise","fetch","then","osoby","vyleceni","umrti","groupedByDateDistrict","forEach","personList","fieldToIncrement","person","grouped","isoDate","field","groupKey","infectedCount","curedCount","deathCount","incrementField","okres_lau_kod","datum","START_TIMESTAMP","getTime","startDate","startTimestampIsoDate","allDistricts","districtId","timestamp","prevRecord","record","Object","values","DataView","TIME_INTERVALS","label","days","initialState","rawData","dataView","window","localStorage","getItem","Region","regionCode","districtCode","timeIntervalDays","parseInt","needle","loaded","rootSlice","createSlice","reducers","fetchDataSuccess","state","action","payload","maxTimestamp","item","setDistrictCode","setRegionCode","switchDataView","setTimeIntervalDays","setNeedle","actions","selectDataView","root","TODAY","select","selectDataWithDataView","createSelector","groups","existing","groupByRegion","selectMaxActiveCount","getMaxActiveCount","selectDataForMap","selectDataForGraph","District","Graph","onChangeNeedle","derivedData","y","detailPoint","xDomain","yDomain","defaultValue","minY","maxY","handleNearestX","useCallback","value","event","flex","display","flexDirection","userSelect","position","xType","fontSize","tickLabelAngle","onNearestX","box","line","backgroundColor","padding","opacity","TimeIntervalToggle","onChange","handleChange","newValue","ToggleButtonGroup","size","exclusive","ToggleButton","Wrapper","styled","height","Toolbar","alignItems","Spacer","LinksBox","textAlign","NoData","SourceLink","App","useSelector","dataForMap","dispatch","useDispatch","handleRegionDistrictChange","target","handleDataViewChange","useEffect","getCzDistricts","Select","variant","marginRight","outlined","MenuItem","allRegions","newTimeIntervalMs","href","rel","CircularProgress","marginTop","Boolean","location","hostname","match","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","selector","getItemsToPersist","next","oldData","getState","returnValue","newData","keys","oldItem","newItem","setItem","theme","createMuiTheme","palette","primary","blue","ReactDOM","render","ThemeProvider","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19fb383c.chunk.js","sourcesContent":["export const SHAPE_KEYS: Record<string, string> = {\n  path: 'd',\n  polygon: 'points',\n  polyline: 'points',\n};\n","import React, { useRef, useMemo } from 'react';\nimport { SHAPE_KEYS } from './common';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport interface MapRegion {\n  shape: string;\n  type: string;\n  code: string;\n  color: string;\n}\n\nexport interface SvgMapProps {\n  regions: MapRegion[];\n  selectedRegionCode?: string;\n  style?: React.CSSProperties;\n  viewBox: string;\n  onPointerMove?: (id: string | undefined) => void;\n  onFinalChange?: (id: string | undefined) => void;\n}\n\nconst getAttributeFromEventTarget = (\n  e: React.PointerEvent<SVGSVGElement>,\n  attributeName: string\n): string | undefined => {\n  const el = document.elementFromPoint(e.clientX, e.clientY) as\n    | SVGElement\n    | undefined;\n  return el && el.dataset ? el.dataset[attributeName] : undefined;\n};\n\nconst useStyles = makeStyles({\n  region: {\n    stroke: '#888',\n    strokeWidth: 1,\n    strokeLinejoin: 'bevel',\n  },\n  regionSelection: {\n    fill: 'none',\n    stroke: '#444',\n    strokeWidth: 3,\n    strokeLinejoin: 'bevel',\n  },\n});\n\nconst SvgMap = ({\n  regions,\n  onPointerMove,\n  onFinalChange,\n  selectedRegionCode,\n  style = {},\n  viewBox,\n}: SvgMapProps) => {\n  const classes = useStyles();\n  const lastNotified = useRef<string | undefined>(undefined);\n  const selectedRegion = useMemo(\n    () =>\n      typeof selectedRegionCode !== 'undefined'\n        ? regions.find(({ code }) => code === selectedRegionCode)\n        : undefined,\n    [selectedRegionCode, regions]\n  );\n  return (\n    <svg\n      viewBox={viewBox}\n      style={{ touchAction: 'none', ...style }}\n      onPointerMove={(e) => {\n        const id = getAttributeFromEventTarget(e, 'id');\n        if (id !== lastNotified.current && e.buttons === 1 && onPointerMove) {\n          lastNotified.current = id;\n          onPointerMove(id);\n        }\n      }}\n      onPointerDown={(e) => {\n        const id = getAttributeFromEventTarget(e, 'id');\n        if (id !== lastNotified.current && onPointerMove) {\n          lastNotified.current = id;\n          onPointerMove(id);\n        }\n      }}\n      onPointerUp={(e) => {\n        const id = getAttributeFromEventTarget(e, 'id');\n        if (id !== lastNotified.current) {\n          if (onPointerMove) {\n            onPointerMove(id);\n          }\n        }\n        if (onFinalChange) {\n          onFinalChange(id);\n        }\n        lastNotified.current = undefined;\n      }}\n    >\n      <g>\n        {regions.map(({ type: elType, color, shape, code }) =>\n          React.createElement(elType, {\n            className: classes.region,\n            style: { fill: color },\n            key: code,\n            'data-id': code,\n            [SHAPE_KEYS[elType]]: shape,\n          })\n        )}\n        {selectedRegion &&\n          React.createElement(selectedRegion.type, {\n            className: classes.regionSelection,\n            [SHAPE_KEYS[selectedRegion.type]]: selectedRegion.shape,\n          })}\n      </g>\n    </svg>\n  );\n};\n\nexport default SvgMap;\n","import React, { useMemo } from 'react';\nimport districts from './districts.json';\nimport SvgMap, { SvgMapProps } from './SvgMap';\nimport { interpolateReds } from 'd3-scale-chromatic';\nimport { DistrictStatsComputed } from '../../model/state';\n\nconst DistrictsMap = ({\n  data,\n  maxActiveCount,\n  ...props\n}: Omit<SvgMapProps, 'regions' | 'viewBox'> & {\n  data: DistrictStatsComputed[];\n  maxActiveCount: number;\n}) => {\n  const enhanced = useMemo(() => {\n    return districts.map((x) => ({\n      ...x,\n      color: interpolateReds(\n        (data.find(({ district }) => district === x.code)?.activeCount || 0) /\n          (maxActiveCount || 1)\n      ),\n    }));\n  }, [maxActiveCount, data]);\n\n  return <SvgMap regions={enhanced} viewBox=\"0 0 748 500.3\" {...props} />;\n};\n\nexport default DistrictsMap;\n","import React, { useMemo } from 'react';\nimport regions from './regions.json';\nimport SvgMap, { SvgMapProps } from './SvgMap';\nimport { DistrictStatsComputed } from '../../model/state';\nimport { interpolateReds } from 'd3-scale-chromatic';\n\nconst RegionsMap = ({\n  data,\n  maxActiveCount,\n  ...props\n}: Omit<SvgMapProps, 'regions' | 'viewBox'> & {\n  data: DistrictStatsComputed[];\n  maxActiveCount: number;\n}) => {\n  const enhanced = useMemo(() => {\n    return regions.map((r) => ({\n      ...r,\n      color: interpolateReds(\n        (data.find(({ region }) => region === r.code)?.activeCount || 0) /\n          (maxActiveCount || 1)\n      ),\n    }));\n  }, [maxActiveCount, data]);\n  return <SvgMap regions={enhanced} viewBox=\"0 0 357.4 233.8\" {...props} />;\n};\n\nexport default RegionsMap;\n","export const toJson = <T = any>(response: Response): Promise<T> =>\n  response.json();\n\nexport const mzcrUrl = (resource: string) =>\n  `https://onemocneni-aktualne.mzcr.cz/api/v2/covid-19/${resource}.min.json`;\n","export interface NutsItem {\n  id: string;\n  name: string;\n  spc: string;\n}\n\nexport default [\n  { id: 'CZ01', name: 'Praha', spc: 'CZ0100' },\n  { id: 'CZ010', name: 'Hlavní město Praha', spc: 'CZ0110' },\n  { id: 'CZ0100', name: 'Praha', spc: 'CZ010' },\n  { id: 'CZ02', name: 'Střední Čechy', spc: 'CZ0200' },\n  { id: 'CZ020', name: 'Středočeský kraj', spc: 'CZ0210' },\n  { id: 'CZ0201', name: 'Benešov', spc: 'CZ0211' },\n  { id: 'CZ0202', name: 'Beroun', spc: 'CZ0212' },\n  { id: 'CZ0203', name: 'Kladno', spc: 'CZ0213' },\n  { id: 'CZ0204', name: 'Kolín', spc: 'CZ0214' },\n  { id: 'CZ0205', name: 'Kutná Hora', spc: 'CZ0215' },\n  { id: 'CZ0206', name: 'Mělník', spc: 'CZ0216' },\n  { id: 'CZ0207', name: 'Mladá Boleslav', spc: 'CZ0217' },\n  { id: 'CZ0208', name: 'Nymburk', spc: 'CZ0218' },\n  { id: 'CZ0209', name: 'Praha-východ', spc: 'CZ0219' },\n  { id: 'CZ020A', name: 'Praha-západ', spc: 'CZ021A' },\n  { id: 'CZ020B', name: 'Příbram', spc: 'CZ021B' },\n  { id: 'CZ020C', name: 'Rakovník', spc: 'CZ021C' },\n  { id: 'CZ03', name: 'Jihozápad', spc: 'CZ0300' },\n  { id: 'CZ031', name: 'Jihočeský kraj', spc: 'CZ0310' },\n  { id: 'CZ0311', name: 'České Budějovice', spc: 'CZ0311' },\n  { id: 'CZ0312', name: 'Český Krumlov', spc: 'CZ0312' },\n  { id: 'CZ0313', name: 'Jindřichův Hradec', spc: 'CZ0313' },\n  { id: 'CZ0314', name: 'Písek', spc: 'CZ0314' },\n  { id: 'CZ0315', name: 'Prachatice', spc: 'CZ0315' },\n  { id: 'CZ0316', name: 'Strakonice', spc: 'CZ0316' },\n  { id: 'CZ0317', name: 'Tábor', spc: 'CZ0317' },\n  { id: 'CZ032', name: 'Plzeňský kraj', spc: 'CZ0320' },\n  { id: 'CZ0321', name: 'Domažlice', spc: 'CZ0321' },\n  { id: 'CZ0322', name: 'Klatovy', spc: 'CZ0322' },\n  { id: 'CZ0323', name: 'Plzeň-město', spc: 'CZ0323' },\n  { id: 'CZ0324', name: 'Plzeň-jih', spc: 'CZ0324' },\n  { id: 'CZ0325', name: 'Plzeň-sever', spc: 'CZ0325' },\n  { id: 'CZ0326', name: 'Rokycany', spc: 'CZ0326' },\n  { id: 'CZ0327', name: 'Tachov', spc: 'CZ0327' },\n  { id: 'CZ04', name: 'Severozápad', spc: 'CZ0400' },\n  { id: 'CZ041', name: 'Karlovarský kraj', spc: 'CZ0410' },\n  { id: 'CZ0411', name: 'Cheb', spc: 'CZ0411' },\n  { id: 'CZ0412', name: 'Karlovy Vary', spc: 'CZ0412' },\n  { id: 'CZ0413', name: 'Sokolov', spc: 'CZ0413' },\n  { id: 'CZ042', name: 'Ústecký kraj', spc: 'CZ0420' },\n  { id: 'CZ0421', name: 'Děčín', spc: 'CZ0421' },\n  { id: 'CZ0422', name: 'Chomutov', spc: 'CZ0422' },\n  { id: 'CZ0423', name: 'Litoměřice', spc: 'CZ0423' },\n  { id: 'CZ0424', name: 'Louny', spc: 'CZ0424' },\n  { id: 'CZ0425', name: 'Most', spc: 'CZ0425' },\n  { id: 'CZ0426', name: 'Teplice', spc: 'CZ0426' },\n  { id: 'CZ0427', name: 'Ústí nad Labem', spc: 'CZ0427' },\n  { id: 'CZ05', name: 'Severovýchod', spc: 'CZ0500' },\n  { id: 'CZ051', name: 'Liberecký kraj', spc: 'CZ0510' },\n  { id: 'CZ0511', name: 'Česká Lípa', spc: 'CZ0511' },\n  { id: 'CZ0512', name: 'Jablonec nad Nisou', spc: 'CZ0512' },\n  { id: 'CZ0513', name: 'Liberec', spc: 'CZ0513' },\n  { id: 'CZ0514', name: 'Semily', spc: 'CZ0514' },\n  { id: 'CZ052', name: 'Královéhradecký kraj', spc: 'CZ0520' },\n  { id: 'CZ0521', name: 'Hradec Králové', spc: 'CZ0521' },\n  { id: 'CZ0522', name: 'Jičín', spc: 'CZ0522' },\n  { id: 'CZ0523', name: 'Náchod', spc: 'CZ0523' },\n  { id: 'CZ0524', name: 'Rychnov nad Kněžnou', spc: 'CZ0524' },\n  { id: 'CZ0525', name: 'Trutnov', spc: 'CZ0525' },\n  { id: 'CZ053', name: 'Pardubický kraj', spc: 'CZ0530' },\n  { id: 'CZ0531', name: 'Chrudim', spc: 'CZ0531' },\n  { id: 'CZ0532', name: 'Pardubice', spc: 'CZ0532' },\n  { id: 'CZ0533', name: 'Svitavy', spc: 'CZ0533' },\n  { id: 'CZ0534', name: 'Ústí nad Orlicí', spc: 'CZ0534' },\n  { id: 'CZ06', name: 'Jihovýchod', spc: 'CZ0600' },\n  { id: 'CZ063', name: 'Kraj Vysočina', spc: 'CZ0610' },\n  { id: 'CZ0631', name: 'Havlíčkův Brod', spc: 'CZ0611' },\n  { id: 'CZ0632', name: 'Jihlava', spc: 'CZ0612' },\n  { id: 'CZ0633', name: 'Pelhřimov', spc: 'CZ0613' },\n  { id: 'CZ0634', name: 'Třebíč', spc: 'CZ0614' },\n  { id: 'CZ0635', name: 'Žďár nad Sázavou', spc: 'CZ0615' },\n  { id: 'CZ064', name: 'Jihomoravský kraj', spc: 'CZ0620' },\n  { id: 'CZ0641', name: 'Blansko', spc: 'CZ0621' },\n  { id: 'CZ0642', name: 'Brno-město', spc: 'CZ0622' },\n  { id: 'CZ0643', name: 'Brno-venkov', spc: 'CZ0623' },\n  { id: 'CZ0644', name: 'Břeclav', spc: 'CZ0624' },\n  { id: 'CZ0645', name: 'Hodonín', spc: 'CZ0625' },\n  { id: 'CZ0646', name: 'Vyškov', spc: 'CZ0626' },\n  { id: 'CZ0647', name: 'Znojmo', spc: 'CZ0627' },\n  { id: 'CZ07', name: 'Střední Morava', spc: 'CZ0700' },\n  { id: 'CZ071', name: 'Olomoucký kraj', spc: 'CZ0710' },\n  { id: 'CZ0711', name: 'Jeseník', spc: 'CZ0711' },\n  { id: 'CZ0712', name: 'Olomouc', spc: 'CZ0712' },\n  { id: 'CZ0713', name: 'Prostějov', spc: 'CZ0713' },\n  { id: 'CZ0714', name: 'Přerov', spc: 'CZ0714' },\n  { id: 'CZ0715', name: 'Šumperk', spc: 'CZ0715' },\n  { id: 'CZ072', name: 'Zlínský kraj', spc: 'CZ0720' },\n  { id: 'CZ0721', name: 'Kroměříž', spc: 'CZ0721' },\n  { id: 'CZ0722', name: 'Uherské Hradiště', spc: 'CZ0722' },\n  { id: 'CZ0723', name: 'Vsetín', spc: 'CZ0723' },\n  { id: 'CZ0724', name: 'Zlín', spc: 'CZ0724' },\n  { id: 'CZ08', name: 'Moravskoslezsko', spc: 'CZ0800' },\n  { id: 'CZ080', name: 'Moravskoslezský kraj', spc: 'CZ0810' },\n  { id: 'CZ0801', name: 'Bruntál', spc: 'CZ0811' },\n  { id: 'CZ0802', name: 'Frýdek-Místek', spc: 'CZ0812' },\n  { id: 'CZ0803', name: 'Karviná', spc: 'CZ0813' },\n  { id: 'CZ0804', name: 'Nový Jičín', spc: 'CZ0814' },\n  { id: 'CZ0805', name: 'Opava', spc: 'CZ0815' },\n  { id: 'CZ0806', name: 'Ostrava-město', spc: 'CZ0816' },\n] as NutsItem[];\n","export const asc = (a: string, b: string) => a.localeCompare(b);\nexport const desc = (a: string, b: string) => b.localeCompare(a);\n","import nuts from './nuts';\nimport { asc } from '../utils/compareStrings';\n\nexport const all = nuts\n  .filter(({ id }) => id.length === 6)\n  .sort((a, b) => asc(a.name, b.name));\n\nexport const byId = (id: string) => all.find((d) => d.id === id);\n\nexport const getRegion = (district: string) => district.substring(0, 5);\n","const today = () => {\n  const now = new Date();\n  return new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));\n};\n\nexport default today;\n","export const formatIsoDate = (year: number, month: number, date: number) =>\n  `${year}-${month < 10 ? '0' : ''}${month}-${date < 10 ? '0' : ''}${date}`;\n\n/** 1.2.2020 -> 2020-02-01 */\nexport const normalizeDate = (origDate: string) => {\n  const [date, month, year] = origDate.split('.');\n  return formatIsoDate(parseInt(year), parseInt(month), parseInt(date));\n};\n\nexport const dateToIsoDate = (date: Date) =>\n  formatIsoDate(\n    date.getUTCFullYear(),\n    date.getUTCMonth() + 1,\n    date.getUTCDate()\n  );\n","import { toJson, mzcrUrl } from './runtime';\nimport DistrictStatsRecord from '../model/DistrictStatsRecord';\nimport { all as allDistricts, getRegion } from '../model/district';\nimport today from '../utils/today';\nimport { DAY_MS } from '../utils/constants';\nimport { dateToIsoDate } from '../utils/dateUtils';\n\ninterface MzcrResponse<T> {\n  data: T[];\n}\n\ninterface PersonRecord {\n  datum: string;\n  kraj_nuts_kod: string;\n  okres_lau_kod: string;\n  pohlavi: 'M' | 'Z';\n  vek: number;\n}\n\ninterface AbroadInfectionMixin {\n  nakaza_v_zahranici: boolean;\n  nakaza_zeme_csu_kod: string;\n}\n\nconst makeKey = (items: string[]) => items.join('_');\n\nconst incrementField = (\n  grouped: Record<string, DistrictStatsRecord>,\n  {\n    district,\n    region,\n    isoDate,\n    field,\n  }: {\n    district: string;\n    region: string;\n    isoDate: string;\n    field: keyof DistrictStatsRecord;\n  }\n) => {\n  const groupKey = makeKey([district, isoDate]);\n  if (!grouped[groupKey]) {\n    grouped[groupKey] = {\n      date: new Date(isoDate),\n      infectedCount: 0,\n      curedCount: 0,\n      deathCount: 0,\n      district,\n      region,\n    };\n  }\n  grouped[groupKey][field]++;\n};\n\nexport const get = (): Promise<DistrictStatsRecord[]> =>\n  Promise.all([\n    fetch(mzcrUrl('osoby')).then(toJson),\n    fetch(mzcrUrl('vyleceni')).then(toJson),\n    fetch(mzcrUrl('umrti')).then(toJson),\n  ]).then(\n    ([{ data: osoby }, { data: vyleceni }, { data: umrti }]: [\n      MzcrResponse<PersonRecord & AbroadInfectionMixin>,\n      MzcrResponse<PersonRecord>,\n      MzcrResponse<PersonRecord>\n    ]) => {\n      const groupedByDateDistrict: Record<string, DistrictStatsRecord> = {};\n\n      const datasetToIncrementedField: [\n        PersonRecord[],\n        keyof DistrictStatsRecord\n      ][] = [\n        [osoby, 'infectedCount'],\n        [vyleceni, 'curedCount'],\n        [umrti, 'deathCount'],\n      ];\n\n      datasetToIncrementedField.forEach(([personList, fieldToIncrement]) => {\n        personList.forEach((person) => {\n          incrementField(groupedByDateDistrict, {\n            district: person.okres_lau_kod,\n            region: getRegion(person.okres_lau_kod),\n            isoDate: person.datum,\n            field: fieldToIncrement,\n          });\n        });\n      });\n\n      // Add intermediate records for each day\n      // const groupedByDateDistrict: Record<string, DistrictStatsRecord> = {};\n      const START_TIMESTAMP = new Date('2020-03-01').getTime();\n      const startDate = new Date(START_TIMESTAMP);\n      const startTimestampIsoDate = dateToIsoDate(startDate);\n\n      // Make sure there is a record for every district at the first date\n      allDistricts.forEach(({ id: districtId }) => {\n        const groupKey = makeKey([districtId, startTimestampIsoDate]);\n        if (!groupedByDateDistrict[groupKey]) {\n          groupedByDateDistrict[groupKey] = {\n            infectedCount: 0,\n            curedCount: 0,\n            deathCount: 0,\n            date: startDate,\n            district: districtId,\n            region: getRegion(districtId),\n          };\n        }\n      });\n\n      // Go one date after another and\n      // - fill missing records by copying numbers from previous days\n      // - accumulate records with numbers\n      for (\n        let timestamp = START_TIMESTAMP + DAY_MS;\n        timestamp <= today().getTime();\n        timestamp += DAY_MS\n      ) {\n        const date = new Date(timestamp);\n        allDistricts.forEach(({ id: districtId }) => {\n          const prevRecord =\n            groupedByDateDistrict[\n              makeKey([districtId, dateToIsoDate(new Date(timestamp - DAY_MS))])\n            ];\n\n          const groupKey = makeKey([districtId, dateToIsoDate(date)]);\n          if (groupedByDateDistrict[groupKey]) {\n            // There was a change\n            const record = groupedByDateDistrict[groupKey];\n            record.infectedCount += prevRecord.infectedCount;\n            record.curedCount += prevRecord.curedCount;\n            record.deathCount += prevRecord.deathCount;\n          } else {\n            // Just copy the previous record\n            groupedByDateDistrict[groupKey] = {\n              ...prevRecord,\n              date,\n            };\n          }\n        });\n      }\n\n      let flattened = Object.values(groupedByDateDistrict).sort(\n        (a, b) => a.date.getTime() - b.date.getTime()\n      );\n\n      return flattened;\n    }\n  );\n","export const DAY_MS = 1000 * 60 * 60 * 24;\n","import { get as getCzDistricts } from '../api/czDistrictsBig';\n\nimport { createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from './store';\nimport DistrictStatsRecord from './DistrictStatsRecord';\nimport today from '../utils/today';\nimport { DAY_MS } from '../utils/constants';\nimport { dateToIsoDate } from '../utils/dateUtils';\n\nconst DEFAULT_REGION = 'CZ064'; // Jihomoravský kraj\nconst DEFAULT_DISTRICT = 'CZ0642'; // Brno-město\n\nexport enum DataView {\n  Country = 'country',\n  Region = 'region',\n  District = 'district',\n}\n\ntype TimeInterval = {\n  id: string;\n  label: string;\n  days: number;\n};\n\nexport const TIME_INTERVALS: TimeInterval[] = [\n  { id: '14days', label: '14 dní', days: 14 },\n  { id: '30days', label: '30 dní', days: 30 },\n  { id: '60days', label: '60 dní', days: 60 },\n  { id: 'all', label: 'vše', days: 1000000 },\n];\n\ninterface State {\n  // Main data\n  rawData: DistrictStatsRecord[];\n\n  // Persistent settings\n  dataView: DataView;\n  regionCode: string;\n  districtCode: string;\n  timeIntervalDays: number;\n\n  // Temporary settings\n  needle: Date;\n  loaded: boolean;\n}\n\nconst initialState: State = {\n  // Main data\n  rawData: [],\n\n  // Persistent settings\n  dataView:\n    (window.localStorage.getItem('dataView') as DataView) || DataView.Region,\n  regionCode: window.localStorage.getItem('regionCode') || DEFAULT_REGION,\n  districtCode: window.localStorage.getItem('districtCode') || DEFAULT_DISTRICT,\n  timeIntervalDays:\n    parseInt(window.localStorage.getItem('timeIntervalDays') || '') ||\n    TIME_INTERVALS.find(({ id }) => id === '30days')!.days,\n\n  // Temporary settings\n  needle: new Date(0),\n  loaded: false,\n};\n\nexport const rootSlice = createSlice({\n  name: 'root',\n  initialState,\n  reducers: {\n    fetchDataSuccess: (state, action: PayloadAction<DistrictStatsRecord[]>) => {\n      state.rawData = action.payload;\n\n      let maxTimestamp = 0;\n      action.payload.forEach((item) => {\n        if (item.date.getTime() > maxTimestamp) {\n          maxTimestamp = item.date.getTime();\n        }\n      });\n      state.needle = new Date(maxTimestamp);\n      state.loaded = true;\n    },\n    setDistrictCode: (state, action: PayloadAction<string>) => {\n      state.districtCode = action.payload;\n    },\n    setRegionCode: (state, action: PayloadAction<string>) => {\n      state.regionCode = action.payload;\n    },\n    switchDataView: (state, action: PayloadAction<DataView>) => {\n      state.dataView = action.payload;\n    },\n    setTimeIntervalDays: (state, action: PayloadAction<number>) => {\n      state.timeIntervalDays = action.payload;\n    },\n    setNeedle: (state, action: PayloadAction<Date>) => {\n      state.needle = action.payload;\n    },\n  },\n});\n\nexport const getItemsToPersist = ({\n  dataView,\n  regionCode,\n  districtCode,\n  timeIntervalDays,\n}: State) =>\n  ({\n    dataView,\n    regionCode,\n    districtCode,\n    timeIntervalDays,\n  } as any);\n\nexport const {\n  setDistrictCode,\n  setRegionCode,\n  switchDataView,\n  setNeedle,\n  setTimeIntervalDays,\n} = rootSlice.actions;\n\nexport const fetchDataAsync = (): AppThunk => (dispatch) => {\n  getCzDistricts().then((data) =>\n    dispatch(rootSlice.actions.fetchDataSuccess(data))\n  );\n};\n\n// Selectors\n\nexport const selectRawData = (state: RootState) => state.root.rawData;\nexport const selectDataView = (state: RootState) => state.root.dataView;\nexport const selectRegionCode = (state: RootState) => state.root.regionCode;\nexport const selectDistrictCode = (state: RootState) => state.root.districtCode;\nexport const selectTimeIntervalDays = (state: RootState) =>\n  state.root.timeIntervalDays;\nexport const selectNeedle = (state: RootState) => state.root.needle;\n\nconst TODAY = today();\n\nexport interface DistrictStatsComputed extends DistrictStatsRecord {\n  activeCount: number;\n}\n\nexport const groupByRegion = (items: DistrictStatsRecord[]) => {\n  const groups: Record<string, DistrictStatsRecord> = {};\n  items.forEach((item) => {\n    const key = `${dateToIsoDate(item.date)}_${item.region}`;\n    if (!groups[key]) {\n      groups[key] = { ...item, district: '' };\n    } else {\n      const existing = groups[key];\n      groups[key] = {\n        ...existing,\n        curedCount: existing.curedCount + item.curedCount,\n        deathCount: existing.deathCount + item.deathCount,\n        infectedCount: existing.infectedCount + item.infectedCount,\n      };\n    }\n  });\n\n  return Object.values(groups);\n};\n\nexport const getMaxActiveCount = (items: DistrictStatsComputed[]) => {\n  let maxActiveCount = 0;\n  items.forEach((x) => {\n    if (x.activeCount > maxActiveCount) {\n      maxActiveCount = x.activeCount;\n    }\n  });\n  return maxActiveCount;\n};\n\nexport const select = (state: RootState) => state.root;\n\nexport const selectDataWithDataView = createSelector(\n  selectRawData,\n  selectDataView,\n  (rawData, dataView) => {\n    let filtered =\n      dataView === DataView.Region ? groupByRegion(rawData) : rawData;\n\n    return filtered.map(\n      (x): DistrictStatsComputed => {\n        return {\n          ...x,\n          activeCount: x.infectedCount - x.deathCount - x.curedCount,\n        };\n      }\n    );\n  }\n);\n\nexport const selectMaxActiveCount = createSelector(\n  selectDataWithDataView,\n  (data) => getMaxActiveCount(data)\n);\n\nexport const selectDataForMap = createSelector(\n  selectDataWithDataView,\n  selectNeedle,\n  (data, needle) => data.filter((x) => x.date.getTime() === needle.getTime())\n);\n\nexport const selectDataForGraph = createSelector(\n  selectDataWithDataView,\n  selectDataView,\n  selectRegionCode,\n  selectDistrictCode,\n  selectTimeIntervalDays,\n  (rawData, dataView, regionCode, districtCode, timeIntervalDays) => {\n    return rawData.filter((x) => {\n      return (\n        ((dataView === DataView.District && x.district === districtCode) ||\n          (dataView === DataView.Region && x.region === regionCode)) &&\n        TODAY.getTime() - x.date.getTime() <= timeIntervalDays * DAY_MS\n      );\n    });\n  }\n);\n\nexport default rootSlice.reducer;\n","import nuts from './nuts';\nimport { asc } from '../utils/compareStrings';\n\nexport const all = nuts\n  .filter(({ id }) => id.length === 5)\n  .sort((a, b) => asc(a.name, b.name));\n\nexport const byId = (id: string) => all.find((d) => d.id === id);\n","import React, { useMemo, useCallback } from 'react';\nimport {\n  FlexibleXYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineSeries,\n  Crosshair,\n  LineSeriesPoint,\n} from 'react-vis';\nimport { DistrictStatsComputed } from '../../model/state';\nimport 'react-vis/dist/style.css';\nimport today from '../../utils/today';\n\nexport interface GraphProps {\n  data: DistrictStatsComputed[];\n  needle?: number;\n  onChangeNeedle?: (needle: number) => void;\n}\n\nconst formatDate = (date: Date) =>\n  `${date.getUTCDate()}. ${date.getUTCMonth() + 1}. ${date.getUTCFullYear()}`;\n\nconst Graph = ({ data, onChangeNeedle, needle }: GraphProps) => {\n  const derivedData = useMemo<LineSeriesPoint[]>(() => {\n    return data.map((item) => ({\n      x: item.date.getTime(),\n      y: item.activeCount,\n    }));\n  }, [data]);\n\n  const detailPoint = useMemo(\n    () => (needle ? derivedData.find((item) => item.x === needle) : undefined),\n    [derivedData, needle]\n  );\n\n  const { xDomain, yDomain } = useMemo(() => {\n    let startDate = today();\n    let defaultValue = data.length > 0 ? data[0].activeCount : 0;\n    let minY = defaultValue;\n    let maxY = defaultValue;\n\n    data.forEach((item) => {\n      if (item.date.getTime() < startDate.getTime()) {\n        startDate = item.date;\n      }\n      if (item.activeCount < minY) {\n        minY = item.activeCount;\n      }\n      if (item.activeCount > maxY) {\n        maxY = item.activeCount;\n      }\n    });\n\n    return {\n      xDomain: [startDate, today()],\n      yDomain: [0, maxY],\n    };\n  }, [data]);\n\n  const handleNearestX = useCallback(\n    (value: LineSeriesPoint, { event }) => {\n      if (\n        (typeof event.buttons === 'undefined' || event.buttons === 1) &&\n        onChangeNeedle\n      ) {\n        onChangeNeedle(value.x);\n      }\n    },\n    [onChangeNeedle]\n  );\n\n  return (\n    <div\n      style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        userSelect: 'none',\n      }}\n    >\n      <div style={{ flex: 1, position: 'relative' }}>\n        <FlexibleXYPlot\n          xDomain={xDomain}\n          yDomain={yDomain}\n          xType=\"time\"\n          style={{\n            fontSize: 12,\n          }}\n        >\n          <VerticalGridLines />\n          <HorizontalGridLines />\n          <XAxis tickLabelAngle={-45} />\n          <YAxis />\n          <LineSeries\n            data={derivedData}\n            onNearestX={handleNearestX}\n            style={{\n              fill: 'none',\n            }}\n          />\n          <Crosshair\n            style={{\n              box: { display: 'none' },\n              line: { backgroundColor: '#bbb' },\n            }}\n            values={detailPoint ? [detailPoint] : undefined}\n          />\n        </FlexibleXYPlot>\n      </div>\n      <div style={{ padding: 16, opacity: needle ? 1 : 0, userSelect: 'text' }}>\n        {formatDate(new Date(detailPoint?.x || 0))}:{' '}\n        <strong>{detailPoint?.y}</strong> aktivních nakažených ⤴️\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n","import React, { useCallback } from 'react';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { TIME_INTERVALS } from '../model/state';\n\nconst TimeIntervalToggle = ({\n  value,\n  onChange,\n}: {\n  value: number;\n  onChange?: (value: number) => void;\n}) => {\n  const handleChange = useCallback(\n    (e, newValue: number) => {\n      if (onChange && newValue) {\n        onChange(newValue);\n      }\n    },\n    [onChange]\n  );\n  return (\n    <ToggleButtonGroup\n      size=\"small\"\n      value={value}\n      exclusive\n      onChange={handleChange}\n    >\n      {TIME_INTERVALS.map((x) => (\n        <ToggleButton key={x.id} value={x.days}>\n          {x.label}\n        </ToggleButton>\n      ))}\n    </ToggleButtonGroup>\n  );\n};\n\nexport default TimeIntervalToggle;\n","import React, { useCallback, useEffect } from 'react';\nimport DistrictsMap from './ui/CzMap/DistrictsMap';\nimport RegionsMap from './ui/CzMap/RegionsMap';\nimport { styled, makeStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  DataView,\n  select,\n  fetchDataAsync,\n  setRegionCode,\n  setDistrictCode,\n  switchDataView,\n  selectDataForGraph,\n  setTimeIntervalDays,\n  selectDataForMap,\n  selectMaxActiveCount,\n  setNeedle,\n} from './model/state';\nimport { all as allDistricts } from './model/district';\nimport { all as allRegions } from './model/region';\nimport Graph from './ui/Graph/Graph';\nimport TimeIntervalToggle from './ui/TimeIntervalToggle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Wrapper = styled('div')({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100vh',\n  color: '#333333',\n  userSelect: 'none',\n});\n\nconst Toolbar = styled('div')({\n  display: 'flex',\n  alignItems: 'center',\n  padding: '8px',\n});\n\nconst Spacer = styled('div')({ flex: 1 });\n\nconst LinksBox = styled('div')({\n  fontSize: 14,\n  textAlign: 'right',\n});\n\nconst NoData = styled('div')({\n  flex: 1,\n  padding: '8px 16px',\n  fontSize: 14,\n  color: 'gray',\n  textAlign: 'center',\n});\n\nconst SourceLink = styled('a')({\n  display: 'block',\n  color: 'gray',\n});\n\nconst useStyles = makeStyles({\n  select: {\n    padding: '10px 14px',\n  },\n});\n\nconst App = () => {\n  const maxActiveCount = useSelector(selectMaxActiveCount);\n  const dataForMap = useSelector(selectDataForMap);\n  const rawData = useSelector(selectDataForGraph);\n  const dispatch = useDispatch();\n  const {\n    dataView,\n    regionCode,\n    districtCode,\n    timeIntervalDays,\n    needle,\n    loaded,\n  } = useSelector(select);\n\n  const handleRegionDistrictChange = useCallback(\n    (event) => {\n      const code: string | null = event.target.value;\n      if (code) {\n        dispatch(\n          dataView === DataView.Region\n            ? setRegionCode(code)\n            : setDistrictCode(code)\n        );\n      }\n    },\n    [dataView, dispatch]\n  );\n\n  const handleDataViewChange = useCallback(\n    (event) => {\n      const dataView: DataView = event.target.value;\n      dispatch(switchDataView(dataView));\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    dispatch(fetchDataAsync());\n  }, [dispatch]);\n\n  const classes = useStyles();\n\n  const selectedRegionCode =\n    dataView === DataView.Region ? regionCode : districtCode;\n\n  return (\n    <Wrapper>\n      <Toolbar>\n        <Select\n          variant=\"outlined\"\n          style={{ marginRight: 8 }}\n          classes={{ outlined: classes.select }}\n          value={dataView}\n          onChange={handleDataViewChange}\n        >\n          {/* <MenuItem value={DataView.Country}>Stát</MenuItem> */}\n          <MenuItem value={DataView.Region}>Kraj</MenuItem>\n          <MenuItem value={DataView.District}>Okres</MenuItem>\n        </Select>\n        <Select\n          variant=\"outlined\"\n          classes={{ outlined: classes.select }}\n          value={selectedRegionCode}\n          onChange={handleRegionDistrictChange}\n        >\n          {(dataView === DataView.Region ? allRegions : allDistricts).map(\n            ({ id, name }) => (\n              <MenuItem key={id} value={id}>\n                {name}\n              </MenuItem>\n            )\n          )}\n        </Select>\n      </Toolbar>\n      {dataView === DataView.District && (\n        <DistrictsMap\n          data={dataForMap}\n          maxActiveCount={maxActiveCount}\n          selectedRegionCode={selectedRegionCode}\n          style={{ flex: 1 }}\n          onPointerMove={(code) => {\n            if (code) {\n              dispatch(setDistrictCode(code));\n            }\n          }}\n        />\n      )}\n      {dataView === DataView.Region && (\n        <RegionsMap\n          data={dataForMap}\n          maxActiveCount={maxActiveCount}\n          selectedRegionCode={selectedRegionCode}\n          style={{ flex: 1 }}\n          onPointerMove={(code) => {\n            if (code) {\n              dispatch(setRegionCode(code));\n            }\n          }}\n        />\n      )}\n      <Toolbar>\n        <TimeIntervalToggle\n          value={timeIntervalDays}\n          onChange={(newTimeIntervalMs) => {\n            dispatch(setTimeIntervalDays(newTimeIntervalMs));\n          }}\n        />\n        <Spacer />\n        <LinksBox>\n          <SourceLink\n            href=\"https://onemocneni-aktualne.mzcr.cz/api/v2/covid-19\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Zdroj dat\n          </SourceLink>\n          <SourceLink\n            href=\"https://github.com/jhrdina/covid-dashboard\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Zdrojový kód\n          </SourceLink>\n        </LinksBox>\n      </Toolbar>\n      {loaded ? (\n        rawData.length > 0 ? (\n          <Graph\n            data={rawData}\n            needle={needle.getTime()}\n            onChangeNeedle={(needle) => dispatch(setNeedle(new Date(needle)))}\n          />\n        ) : (\n          <NoData>Žádná data</NoData>\n        )\n      ) : (\n        <NoData>\n          <CircularProgress />\n          <div style={{ marginTop: 8 }}>Načítání dat...</div>\n        </NoData>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  getDefaultMiddleware,\n  Middleware,\n} from '@reduxjs/toolkit';\nimport rootReducer, { getItemsToPersist } from './state';\n\nconst persistency = <S>(selector: (state: S) => any): Middleware => (store) => (\n  next\n) => (action) => {\n  const oldData = selector(store.getState());\n  const returnValue = next(action);\n  const newData = selector(store.getState());\n\n  Object.keys(newData).forEach((key) => {\n    const oldItem = oldData[key];\n    const newItem = newData[key];\n    const areEqual =\n      oldItem === newItem ||\n      (oldItem instanceof Date &&\n        newItem instanceof Date &&\n        oldItem.getTime() === newItem.getTime());\n\n    if (!areEqual) {\n      window.localStorage.setItem(key, newItem);\n    }\n  });\n  return returnValue;\n};\n\nexport const store = configureStore({\n  reducer: {\n    root: rootReducer,\n  },\n  middleware: [\n    ...getDefaultMiddleware({\n      serializableCheck: false,\n      immutableCheck: false,\n    }),\n    persistency(({ root }: any) => getItemsToPersist(root)) as any,\n  ],\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './model/store';\nimport { ThemeProvider } from '@material-ui/core';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ThemeProvider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}